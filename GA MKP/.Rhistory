}
pop_table[[p]] = aSolution;
pop_obj_table[p] = sum(obj_coef[aSolution])
}
fitness_pop<-NULL
fitness_pop<-vector(mode="numeric")
for (j in 1:NumPop){
fitness_pop[j]<-sum(obj_coef[pop_table[[j]]])
}
min_pop_index<-which(fitness_pop==min(fitness_pop))
min_pop_fitness<-fitness_pop[min_pop_index]
best_objective<-NULL
for (step in 1:3000){
print(step)
## Random Select Two Parents, Do a Tournameent, as Parent 1
rand_1<-sample(1:NumPop,2)
if (pop_obj_table[rand_1[1]]>pop_obj_table[rand_1[2]]){
parent1<-pop_table[rand_1[1]]
}else{
parent1<-pop_table[rand_1[2]]
}
parent1<-unlist(parent1)
fitness_p1<-sum(obj_coef[parent1])
## Random Select Two Parents, Do a Tournameent, as Parent 2
rand_2<-sample(1:NumPop,2)
if (pop_obj_table[rand_2[1]]>pop_obj_table[rand_2[2]]){
parent2<-pop_table[rand_2[1]]
}else{
parent2<-pop_table[rand_2[2]]
}
parent2<-unlist(parent2)
fitness_p2<-sum(obj_coef[parent2])
##### Cross Over------fusion opeartor crossover
aChild_p1<-NULL
aChild_p1<-vector(mod="numeric")
aChild_p2<-NULL
aChild_p2<-vector(mod="numeric")
index <- 0
SameCols <- intersect(parent1, parent2)
DiffCols_p1 <- setdiff(parent1, parent2)
DiffCols_p2 <- setdiff(parent2, parent1)
AccpProb <- fitness_p1/(fitness_p1+fitness_p2);
for (i in 1:length(DiffCols_p1)){
probability1<-runif(1,0,1)
if(probability1>AccpProb) {
aChild_p1[i]<-DiffCols_p1[i]
}
}
aChild_p1<-aChild_p1[!is.na(aChild_p1)]
for (i in 1:length(DiffCols_p2)){
probability1<-runif(1,0,1)
if(probability1<AccpProb) {
aChild_p2[i]<-DiffCols_p2[i]
}
}
aChild_p2<-aChild_p2[!is.na(aChild_p2)]
aChild<-c(SameCols,aChild_p1,aChild_p2)
#########Mutation##########
Pm=0.003 # probablity of mutation
nBitMutation <- rbinom(1,NumCol, Pm)
for (i in 1:nBitMutation){
rand_col<-sample(1:NumCol,1)
if(is.element(rand_col,aChild)==FALSE){
nl <- length(aChild)
aChild[nl+1] <- rand_col
}
else{
aChild <- aChild[which(aChild!=rand_col)]
}
}
#########Repair Operation ##########
#SetS : the set of columns in a solution
#SetU : the set of uncovered rows
#Initialise  U  := {i| Wi  = O, Vi E I}.
#Wi =|S intercsect ai| i E I
SetS<-aChild
Wi1<-NULL # inlitialize
Wi1<-mat.or.vec(NumRow, 1) # intilize Wi=0   200 0s mat.or.vec
for(i in 1:NumRow){
row <- row_table[[i]]
Wi1[i] <-length(intersect(row,SetS))
}
SetU<-which(Wi1==0)
while(length(SetU)>0 ){
which_row = SetU[1]
col_cover_row = row_table[[which_row]]
min_val <- 1000;
min_index <- NULL;
for(j in 1:length(col_cover_row)) {
col <- col_cover_row[j];
val <- obj_coef[col]/length(intersect(SetU,col_table[[col]]))
if(val <= min_val) {
min_val <- val
min_index <- col_cover_row[j]
}
}
aChild<-c(min_index,aChild)
SetU = setdiff(SetU, col_table[[min_index]])
}
#SetU<-which(Wi1==0)
SetS<-aChild
Wi2<-NULL # inlitialize
Wi2<-mat.or.vec(NumRow, 1) # intilize Wi=0   200 0s mat.or.vec
for( i in 1:NumRow){
row <- row_table[[i]]
Wi2[i] <-length(intersect(row,SetS))
}
########################################
#drop Wi
### S  = the set  of columns in  a  solution
#SetS<-aChild
for(k in length(aChild):1){
col<-aChild[k]
for(i in 1:col_table_length[col]){
row_index <- col_table[[col]][i]
Wi2[row_index] <- Wi2[row_index] - 1;
}
infeasible = 0;
for(i in 1:NumRow){
if(Wi2[i]==0 ) { infeasible = 1; break;}
}
#If feasible, get rid of the colmn from solution
if(infeasible == 0) {
aChild=aChild[which(aChild!=col)]
}
#Else, update Wi to its original varlue
else {
for(i in 1:col_table_length[col]){
row_index <- col_table[[col]][i]
Wi2[row_index] <- Wi2[row_index] + 1;
}
}
}
###################################
##to discard any duplicate children and update
identification<-NULL
identification<-numeric()
#ptm <- proc.time()
for (g in 1:NumPop){
identification[g]<-length(setdiff(aChild,pop_table[[g]]))
}
#proc.time() - ptm                   # 0.01s
if (any(identification==0)==0){
fitness_child<-sum(obj_coef[aChild])
max_pop_index_list<-which(fitness_pop==max(fitness_pop))
max_pop_index <- max_pop_index_list[1];
pop_table[[max_pop_index]]<-aChild
fitness_pop[max_pop_index]<-fitness_child
if(fitness_child<min_pop_fitness){
min_pop_fitness<-fitness_child
pop_table[[min_pop_index]]<-aChild
}
print(min_pop_fitness)
# print(mean(identification))
best_objective<-rbind(best_objective,cbind(step,min_pop_fitness,LENGTH=mean(identification)))
}
write.table(best_objective, file = "max.txt", col.names=TRUE, quote=FALSE, row.names=FALSE, sep = ",")
}
proc.time() - ptm
plot(best_objective)
##THe data has objective, coefficient, and rhs,
dataset<-read.csv("MKP1-1.csv",header=F)
#Rprof()
##This is the number of variable --
N<-ncol(dataset)
#I=5 five constraints
rhs <-seq(1:5)
for(i in 1:5) rhs[i] <- dataset[7,i]
lhs <-seq(1:5)
for(i in 1:5) lhs[i] <- 0;
#GENERATE 0 MATRIX
population<-matrix(0,ncol=N,nrow=N)
population=as.data.frame(population)
#GENERATE INITIAL SOLUTION
for(p in 1:N) {
x<- rep(1:N)
temp <- sample(x)
for(i in 1:5) lhs[i] <- 0;
for( k in 1:N ) {
item <- temp[k]
population[p,item] <- 1
success <- 1
for(i in 1:5) {
lhs[i] <- lhs[i]+dataset[i+1,item]
if(lhs[i] > rhs[i]) {success <- 0; break;}
}
if(success == 0){
population[p, item] <- 0;
k<- N;
break;
}
}
}
################Ri:the accumulated resources of constrainti in S ####################
##########################################################################################
#
#  This is the mainbody of your GA
#
##########################################################################################
step<-0
fitness<-vector(mode="numeric")
fitness<-as.data.frame(fitness)
for (j in 1:N){
fitness[1,j]<-sum(dataset[1,]*population[j,])
}
max_index<-which(fitness==max(fitness))
max<-fitness[1,max_index]
best_objective<-data.frame()
child<-NULL
child<-as.data.frame(child)
resource<-vector(mode="numeric")
resource<-NULL
#Rprof(NULL)
#summaryRprof()
for (step in 1:3000){
## Random Select Two Parents, Do a Tournameent, as Parent 1
rand_1<-sample(1:100,2)
pool1<-population[rand_1,]
if (fitness[rand_1[1]]>fitness[rand_1[2]] ){
parent1<-population[rand_1[1],]
}else{
parent1<-population[rand_1[2],]
}
## Random Select Two Parents, Do a Tournameent, as Parent 2
rand_2<-sample(1:100,2)
pool2<-population[rand_2,]
if (fitness[rand_2[1]]>fitness[rand_2[2]] ){
parent2<-population[rand_2[1],]
}else{
parent2<-population[rand_2[2],]
}
#### Cross Over -- Uniform
#child<-NULL
#child<-as.data.frame(child)
for (i in 1:N){
rand_3<-runif(1,0,1)
if (rand_3>0.5){
child[1,i]<-parent1[i]
}else{
child[1,i]<-parent2[i]
}
}
#print(child)
## Mutuation
Pm=0.02 # probablity of mutation
for (i in 1:N){
rand_4<-runif(1,0,1)
if (rand_4<Pm){
if (child[1,i]==1){
tmp<-0
child[1,i]<-tmp
}else{
tmp_1<-1
child[1,i]<-tmp_1
}
}
}
#print(child)
## Repair Operator
for (i in 1:5){
resource[i]<-sum(dataset[i+1,] *child)
}
#print(resource)
###DROP
for (i in N:1){
infeasible <- 0;
if (child[i]==1) {
for (j in 1:5){
if(resource[j]>rhs[j]) {infeasible <- 1; break;}
}
if(infeasible ==1 ) {
child[i]<-0
for (j in 1:5){
resource[j]=resource[j]-dataset[j+1,i]
}
}
}
}
###ADD
#for (j in 1:5){
# resource[j]<-sum(dataset[j+1,] *child)
# }
for (i in 1:N){
if(child[i]==0){
feasible_cons <- 5;
for (j in 1:5){
if (resource[j]+dataset[j+1,i]>rhs[j]){
feasible_cons <- feasible_cons -1;
}
}
if(feasible_cons == 5 ) {
child[i] <- 1
for(j in 1:5) {
resource[j]<-resource[j]+dataset[j+1,i]
}
}
}
}
##to discard any duplicate children
identification<-NULL
identification<-as.logical()
for (i in 1:N){
identification[i]<-identical(child,population[i,])
}
if (any(identification==TRUE)==FALSE){
objective_child<-sum(dataset[1,]*child)
min_index_list<-which(fitness==min(fitness))
min_index <- min_index_list[1];
population[min_index,]<-child
fitness[1,min_index]<-objective_child
if(objective_child>max){
#max<-fitness[1,max_index]
max<-objective_child
fitness [1,max_index]<-child
#fitness[1,max_index]<-max
}
best_objective<-rbind(best_objective,cbind(step,max))
print(list(step,max))
}
write.table(best_objective, file = "max.txt", col.names=TRUE, quote=FALSE, row.names=FALSE, sep = ",")
}
table<-read.table("max.txt",header=T,sep=",")
plot(table,type="b",col="red")
write.csv(population, "population.csv")
##Validation
max_index<-which(fitness==max(fitness))
max<-fitness[1,max_index]
sum(population[max_index,]*dataset[1,])
resource_test<-NULL
for (i in 1:5){
#resource[i]<-sum(dataset[i+1,] *population[max_index,])
resource_test[i]<-sum(population[max_index,]*dataset[i+1,] )
}
resource_test
print(rhs)
setwd("~/Dropbox/IHE7980 Modern Heuristics Code/GA MKP")
##THe data has objective, coefficient, and rhs,
dataset<-read.csv("MKP1-1.csv",header=F)
#Rprof()
##This is the number of variable --
N<-ncol(dataset)
#I=5 five constraints
rhs <-seq(1:5)
for(i in 1:5) rhs[i] <- dataset[7,i]
lhs <-seq(1:5)
for(i in 1:5) lhs[i] <- 0;
#GENERATE 0 MATRIX
population<-matrix(0,ncol=N,nrow=N)
population=as.data.frame(population)
#GENERATE INITIAL SOLUTION
for(p in 1:N) {
x<- rep(1:N)
temp <- sample(x)
for(i in 1:5) lhs[i] <- 0;
for( k in 1:N ) {
item <- temp[k]
population[p,item] <- 1
success <- 1
for(i in 1:5) {
lhs[i] <- lhs[i]+dataset[i+1,item]
if(lhs[i] > rhs[i]) {success <- 0; break;}
}
if(success == 0){
population[p, item] <- 0;
k<- N;
break;
}
}
}
################Ri:the accumulated resources of constrainti in S ####################
##########################################################################################
#
#  This is the mainbody of your GA
#
##########################################################################################
step<-0
fitness<-vector(mode="numeric")
fitness<-as.data.frame(fitness)
for (j in 1:N){
fitness[1,j]<-sum(dataset[1,]*population[j,])
}
max_index<-which(fitness==max(fitness))
max<-fitness[1,max_index]
best_objective<-data.frame()
child<-NULL
child<-as.data.frame(child)
resource<-vector(mode="numeric")
resource<-NULL
#Rprof(NULL)
#summaryRprof()
for (step in 1:3000){
## Random Select Two Parents, Do a Tournameent, as Parent 1
rand_1<-sample(1:100,2)
pool1<-population[rand_1,]
if (fitness[rand_1[1]]>fitness[rand_1[2]] ){
parent1<-population[rand_1[1],]
}else{
parent1<-population[rand_1[2],]
}
## Random Select Two Parents, Do a Tournameent, as Parent 2
rand_2<-sample(1:100,2)
pool2<-population[rand_2,]
if (fitness[rand_2[1]]>fitness[rand_2[2]] ){
parent2<-population[rand_2[1],]
}else{
parent2<-population[rand_2[2],]
}
#### Cross Over -- Uniform
#child<-NULL
#child<-as.data.frame(child)
for (i in 1:N){
rand_3<-runif(1,0,1)
if (rand_3>0.5){
child[1,i]<-parent1[i]
}else{
child[1,i]<-parent2[i]
}
}
#print(child)
## Mutuation
Pm=0.02 # probablity of mutation
for (i in 1:N){
rand_4<-runif(1,0,1)
if (rand_4<Pm){
if (child[1,i]==1){
tmp<-0
child[1,i]<-tmp
}else{
tmp_1<-1
child[1,i]<-tmp_1
}
}
}
#print(child)
## Repair Operator
for (i in 1:5){
resource[i]<-sum(dataset[i+1,] *child)
}
#print(resource)
###DROP
for (i in N:1){
infeasible <- 0;
if (child[i]==1) {
for (j in 1:5){
if(resource[j]>rhs[j]) {infeasible <- 1; break;}
}
if(infeasible ==1 ) {
child[i]<-0
for (j in 1:5){
resource[j]=resource[j]-dataset[j+1,i]
}
}
}
}
###ADD
#for (j in 1:5){
# resource[j]<-sum(dataset[j+1,] *child)
# }
for (i in 1:N){
if(child[i]==0){
feasible_cons <- 5;
for (j in 1:5){
if (resource[j]+dataset[j+1,i]>rhs[j]){
feasible_cons <- feasible_cons -1;
}
}
if(feasible_cons == 5 ) {
child[i] <- 1
for(j in 1:5) {
resource[j]<-resource[j]+dataset[j+1,i]
}
}
}
}
##to discard any duplicate children
identification<-NULL
identification<-as.logical()
for (i in 1:N){
identification[i]<-identical(child,population[i,])
}
if (any(identification==TRUE)==FALSE){
objective_child<-sum(dataset[1,]*child)
min_index_list<-which(fitness==min(fitness))
min_index <- min_index_list[1];
population[min_index,]<-child
fitness[1,min_index]<-objective_child
if(objective_child>max){
#max<-fitness[1,max_index]
max<-objective_child
fitness [1,max_index]<-child
#fitness[1,max_index]<-max
}
best_objective<-rbind(best_objective,cbind(step,max))
print(list(step,max))
}
write.table(best_objective, file = "max.txt", col.names=TRUE, quote=FALSE, row.names=FALSE, sep = ",")
}
table<-read.table("max.txt",header=T,sep=",")
plot(table,type="b",col="red")
write.csv(population, "population.csv")
##Validation
max_index<-which(fitness==max(fitness))
max<-fitness[1,max_index]
sum(population[max_index,]*dataset[1,])
resource_test<-NULL
for (i in 1:5){
#resource[i]<-sum(dataset[i+1,] *population[max_index,])
resource_test[i]<-sum(population[max_index,]*dataset[i+1,] )
}
resource_test
print(rhs)
rand_1<-sample(1:100,2)
